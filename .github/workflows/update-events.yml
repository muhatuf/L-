# .github/workflows/update-events.yml
name: Update Le Havre Events

on:
  # Run every Sunday at 6:00 AM UTC (8:00 AM Paris time)
  schedule:
    - cron: '0 6 * * 0'
  
  # Allow manual triggering
  workflow_dispatch:
  
  # Run on push to main for testing
  push:
    branches: [ main ]
    paths: 
      - 'scraper.py'
      - '.github/workflows/update-events.yml'

jobs:
  update-events:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Use a personal access token to allow pushing back to repo
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip xvfb
        
        # Install Chrome
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Install ChromeDriver
        CHROME_VERSION=$(google-chrome --version | cut -d " " -f3 | cut -d "." -f1)
        CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")
        wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com//${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
        sudo unzip /tmp/chromedriver.zip chromedriver -d /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium beautifulsoup4 requests lxml
    
    - name: Run event scraper
      run: |
        echo "Starting event scraping..."
        python scraper.py
        
        echo "Scraping completed. Checking results..."
        if [ -f "lehavre_events_test.json" ]; then
          echo "JSON file created successfully"
          echo "File size: $(wc -c < lehavre_events_test.json) bytes"
          echo "Number of events: $(python -c "import json; data=json.load(open('lehavre_events_test.json')); print(len(data))")"
        else
          echo "ERROR: JSON file was not created"
          exit 1
        fi
      env:
        DISPLAY: :99
    
    - name: Validate JSON file
      run: |
        python -c "
        import json
        import sys
        from datetime import datetime
        
        try:
            with open('lehavre_events_test.json', 'r') as f:
                events = json.load(f)
            
            print(f'✓ JSON is valid')
            print(f'✓ Found {len(events)} events')
            
            # Basic validation
            valid_events = 0
            for event in events:
                if event.get('title') and event.get('title') != 'Untitled Event':
                    valid_events += 1
            
            print(f'✓ {valid_events} events have valid titles')
            
            if valid_events == 0:
                print('❌ ERROR: No valid events found')
                sys.exit(1)
            
            print('✅ Validation passed')
            
        except Exception as e:
            print(f'❌ JSON validation failed: {e}')
            sys.exit(1)
        "
    
    - name: Check for changes
      id: check_changes
      run: |
        if git diff --quiet lehavre_events_test.json; then
          echo "changes_detected=false" >> $GITHUB_OUTPUT
          echo "No changes detected in events file"
        else
          echo "changes_detected=true" >> $GITHUB_OUTPUT
          echo "Changes detected in events file"
        fi
    
    - name: Commit and push changes
      if: steps.check_changes.outputs.changes_detected == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add the updated JSON file
        git add lehavre_events_test.json
        
        # Also add metadata file if it exists
        if [ -f "lehavre_events_test_with_metadata.json" ]; then
          git add lehavre_events_test_with_metadata.json
        fi
        
        # Create commit message with summary
        CURRENT_DATE=$(date '+%Y-%m-%d %H:%M:%S UTC')
        EVENT_COUNT=$(python -c "import json; data=json.load(open('lehavre_events_test.json')); print(len(data))")
        
        git commit -m "🎭 Auto-update events - ${CURRENT_DATE}

        📊 Summary:
        - Total events: ${EVENT_COUNT}
        - Updated: ${CURRENT_DATE}
        - Source: Le Havre Tourism Website
        
        🤖 This update was performed automatically by GitHub Actions"
        
        git push
    
    - name: Create summary
      run: |
        echo "## 🎭 Event Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        EVENT_COUNT=$(python -c "import json; data=json.load(open('lehavre_events_test.json')); print(len(data))" 2>/dev/null || echo "0")
        echo "**Total Events:** ${EVENT_COUNT}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check_changes.outputs.changes_detected }}" == "true" ]; then
          echo "**Changes:** 🔄 Events updated" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Changes:** ✨ No changes detected" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Recent Events" >> $GITHUB_STEP_SUMMARY
        python -c "
        import json
        from datetime import datetime
        
        try:
            with open('lehavre_events_test.json', 'r') as f:
                events = json.load(f)
            
            print('| Title | Date | Location |')
            print('|-------|------|----------|')
            
            for event in events[:5]:  # Show first 5 events
                title = event.get('title', 'N/A')[:40]
                date = event.get('date', 'N/A')
                location = event.get('full_address', 'N/A')[:30]
                print(f'| {title} | {date} | {location} |')
                
        except Exception as e
